# Importing necessary libraries:
# - NumPy (np) for generating random numbers and performing mathematical operations.
# - Matplotlib (plt) for creating plots, including histograms.
import numpy as np
import matplotlib.pyplot as plt

# Function simulating the number of random draws needed for the sum to exceed 1.
def simulation(num_of_interation):
    # List to store the results of the simulation.
    data = []
    
    # Loop performing a specified number of simulations (num_of_interation).
    for _ in range(0, num_of_interation):
        sum_of = 0  # Sum of random numbers (initialized to 0).
        random_variable = 0  # Counter for the number of draws (initialized to 0).

        # Loop drawing numbers from a uniform distribution [0, 1] until the sum exceeds 1.
        while sum_of <= 1:
            _variable = np.random.uniform(0, 1)  # Drawing a number from the range [0, 1).
            sum_of += _variable  # Adding the drawn number to the sum.
            random_variable += 1  # Incrementing the draw counter.

        # Adding the number of draws needed to exceed the sum of 1 to the results list.
        data.append(random_variable)

    # Returning the list of simulation results.
    return data

# Function drawing a histogram based on the simulation results.
def draw_plot(data):
    # Displaying the average number of draws (AVG) in the console.
    print(f'AVG: {np.average(data)}')
    
    # Creating a histogram:
    # - bins: automatically dividing the data into intervals.
    # - edgecolor: color of the histogram bar edges.
    plt.hist(data, bins=np.arange(min(data), max(data) + 2) - 0.5, edgecolor='black', log=True)

    # Setting the plot title and axis labels.
    plt.title('Histogram of the random variable values')
    plt.xlabel('Number of draws to exceed 1')
    plt.ylabel('Number of simulations (logarithmic scale)')

    # Setting values on the X-axis (integers from minimum to maximum).
    plt.xticks(np.arange(min(data), max(data) + 1)) 

    # Displaying the plot.
    plt.show()

# Number of simulations set to a fixed value (100,000).
n = 100000

# Alternatively, the following line can be uncommented to allow the user to input the number of simulations in the console.
# n = int(input('Number of random pairs [n]: '))

# Calling the simulation and plot drawing functions.
draw_plot(simulation(n))

# Comments in this code were generated by AI to help better understand the code.